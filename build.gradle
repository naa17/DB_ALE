plugins {
    id 'java'
    id 'application'
    id 'war'
    id 'org.gretty' version '2.2.0'
    id 'org.openjfx.javafxplugin' version '0.0.8'
}
version '1.0-SNAPSHOT'

dependencies {
    runtimeOnly group: 'postgresql', name: 'postgresql', version: '9.1-901-1.jdbc4'
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.jmockit', name: 'jmockit', version: '1.49'
    testCompile group: 'org.mockito', name: 'mockito-all', version: '2.0.2-beta'
    compile group: 'javax.mail', name: 'javax.mail-api', version: '1.5.3'
    compile group: 'com.sun.mail', name: 'javax.mail', version: '1.5.3'
    compile group: 'javax.activation', name: 'activation', version: '1.1.1'
    compile group: 'com.google.code.gson', name: 'gson', version:'2.7'
    providedCompile 'javax.servlet:javax.servlet-api:3.1.0'
    
    compileJava.options.fork = false
}

repositories {
    mavenCentral()
    jcenter()
}

application {
    // Define the main class for the application
    mainClassName = 'DB_ALE.Main'
}



war {
    from {
        // all of the library jar files used are to be zipped into the war file
        configurations.runtimeClasspath.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
}

jar {
    manifest {
        attributes 'Main-Class': 'DB_ALE.Main'
    }
}

task fatJar(type: Jar) {
    manifest.from jar.manifest
    classifier = 'all'
    from {
        configurations.runtime.collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    with jar
}

task stage(dependsOn: ['build', 'clean'])
build.mustRunAfter clean

javafx {
    version = '12'
    modules = [ 'javafx.controls', 'javafx.fxml' ]
}
